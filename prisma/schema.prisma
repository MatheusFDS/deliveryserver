datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS NATIVOS
// =================================================================

enum FreightType {
  DIRECTION_AND_CATEGORY
  DIRECTION_AND_DELIVERY_FEE
  DISTANCE_BASED
}

enum OrderStatus {
  SEM_ROTA
  EM_ROTA_AGUARDANDO_LIBERACAO
  EM_ROTA
  EM_ENTREGA
  ENTREGUE
  NAO_ENTREGUE
}

enum DeliveryStatus {
  A_LIBERAR
  INICIADO
  FINALIZADO
  REJEITADO
}

enum ApprovalAction {
  APPROVED
  REJECTED
  RE_APPROVAL_NEEDED
}

enum PaymentStatus {
  PENDENTE
  PAGO
  BAIXADO
  CANCELADO
}
enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// =================================================================
// MODELOS DE DADOS
// =================================================================

model User {
  id             String         @id @default(uuid())
  isActive       Boolean        @default(true)
  email          String         @unique
  password       String?
  name           String
  roleId         String
  tenantId       String?
  firebaseUid    String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relações
  role           Role           @relation(fields: [roleId], references: [id])
  tenant         Tenant?        @relation(fields: [tenantId], references: [id])
  settings       UserSettings?
  driver         Driver?
  approvals      Approval[]
  orderHistories OrderHistory[]
  notifications  Notification[]

  UserInvite UserInvite[] @relation("UserInvites")
}

model Role {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?
  isPlatformRole Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          User[]

  UserInvite UserInvite[]
}

model Tenant {
  id                    String            @id @default(uuid())
  isActive              Boolean           @default(true)
  name                  String            @unique
  domain                String?           @unique
  mobileDomain          String?           @unique
  address               String?
  minDeliveryPercentage Float?
  minValue              Float?
  minOrders             Int?
  minPeso               Float?
  freightType           FreightType       @default(DIRECTION_AND_CATEGORY)
  pricePerKm            Float?
  pricePerDelivery      Float?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relações
  users                 User[]
  drivers               Driver[]
  vehicles              Vehicle[]
  orders                Order[]
  directions            Directions[]
  deliveries            Delivery[]
  categories            Category[]
  accountsPayable       AccountsPayable[]
  paymentDeliveries     PaymentDelivery[]
  deliveryProofs        DeliveryProof[]
  approvals             Approval[]
  optimizedRoutes       OptimizedRoute[]
  notifications         Notification[]
  invites               UserInvite[] // Relação inversa
}

model UserSettings {
  id        String   @id @default(uuid())
  userId    String   @unique
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Driver {
  id              String            @id @default(uuid())
  name            String
  license         String
  cpf             String
  tenantId        String
  userId          String?           @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  vehicles        Vehicle[]
  deliveries      Delivery[]
  orders          Order[]
  accountsPayable AccountsPayable[]
  deliveryProofs  DeliveryProof[]

  @@unique([cpf, tenantId])
  @@index([tenantId])
}

model Vehicle {
  id         String   @id @default(uuid())
  model      String
  plate      String
  cubagem    Float?
  pesoMaximo Float?
  driverId   String
  tenantId   String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  driver     Driver   @relation(fields: [driverId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  deliveries Delivery[]

  @@unique([plate, tenantId])
  @@index([tenantId])
  @@index([driverId])
}

model Order {
  id                     String        @id @default(uuid())
  numero                 String
  data                   DateTime
  idCliente              String
  cliente                String
  endereco               String
  cidade                 String
  uf                     String
  peso                   Float
  volume                 Int
  prazo                  String?
  prioridade             String
  telefone               String
  email                  String
  bairro                 String
  valor                  Float
  instrucoesEntrega      String?
  nomeContato            String
  cpfCnpj                String
  cep                    String
  status                 OrderStatus   @default(SEM_ROTA)
  motivoNaoEntrega       String?
  codigoMotivoNaoEntrega String?
  deliveryId             String?
  tenantId               String
  driverId               String?
  sorting                Int?
  startedAt              DateTime?
  completedAt            DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  tenant                 Tenant        @relation(fields: [tenantId], references: [id])
  delivery               Delivery?     @relation(fields: [deliveryId], references: [id], onDelete: SetNull)
  driver                 Driver?       @relation(fields: [driverId], references: [id])
  deliveryProofs         DeliveryProof[]
  history                OrderHistory[]

  @@unique([numero, tenantId])
  @@index([deliveryId])
  @@index([tenantId])
  @@index([status])
}

model OrderHistory {
  id          String   @id @default(uuid())
  orderId     String
  status      String
  description String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([createdAt])
}

model Directions {
  id           String   @id @default(uuid())
  rangeInicio  String
  rangeFim     String
  valorDirecao Int
  regiao       String
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Delivery {
  id                String            @id @default(uuid())
  driverId          String
  vehicleId         String
  valorFrete        Float
  totalPeso         Float
  totalValor        Float
  dataInicio        DateTime          @default(now())
  dataFim           DateTime?
  status            DeliveryStatus
  tenantId          String
  dataLiberacao     DateTime?
  observacao        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
  driver            Driver            @relation(fields: [driverId], references: [id])
  vehicle           Vehicle           @relation(fields: [vehicleId], references: [id])
  orders            Order[]
  paymentDeliveries PaymentDelivery[]
  approvals         Approval[]

  @@index([tenantId])
  @@index([driverId])
}

model Approval {
  id         String         @id @default(uuid())
  deliveryId String
  tenantId   String
  action     ApprovalAction
  motivo     String?
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  tenant     Tenant         @relation(fields: [tenantId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@index([deliveryId])
  @@index([userId])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  valor     Float
  tenantId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  vehicles  Vehicle[]

  @@unique([name, tenantId])
}

model AccountsPayable {
  id                String            @id @default(uuid())
  amount            Float
  status            PaymentStatus     @default(PENDENTE)
  tenantId          String
  driverId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isGroup           Boolean           @default(false)
  groupedPaymentId  String?
  groupedPayment    AccountsPayable?  @relation("GroupedPayments", fields: [groupedPaymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groupedPayments   AccountsPayable[] @relation("GroupedPayments")
  tenant            Tenant            @relation(fields: [tenantId], references: [id])
  driver            Driver            @relation(fields: [driverId], references: [id])
  paymentDeliveries PaymentDelivery[]
}

model PaymentDelivery {
  paymentId  String
  deliveryId String
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  accountsPayable AccountsPayable @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  delivery        Delivery        @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@id([paymentId, deliveryId])
}

model DeliveryProof {
  id        String   @id @default(uuid())
  orderId   String
  driverId  String
  tenantId  String
  proofUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  driver    Driver   @relation(fields: [driverId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model OptimizedRoute {
  id            String   @id @default(uuid())
  tenantId      String
  startingPoint String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  provider      String
  providerData  Json
  totalDistance Float?
  totalTime     Int?
  mapUrl        String?
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([createdAt])
}

model InvalidatedToken {
  id            String   @id @default(uuid())
  token         String   @unique
  expiresAt     DateTime
  invalidatedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([token])
  @@index([expiresAt])
}

model Notification {
  id        String   @id @default(uuid())
  tenantId  String
  userId    String
  isRead    Boolean  @default(false)
  message   String
  type      String
  linkTo    String?
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model UserInvite {
  id        String      @id @default(uuid())
  email     String
  roleId    String
  tenantId  String?
  invitedBy String
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  inviter   User     @relation("UserInvites", fields: [invitedBy], references: [id])

  @@unique([email, tenantId, status])
}

